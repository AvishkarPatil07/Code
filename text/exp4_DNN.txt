import numpy as np
import pandas as pd
df = pd.DataFrame([[8, 8, 1], [7, 9, 1], [6, 10, 0], [5, 5, 0]],
columns=["cgpa", "profile_score", "placed"])
df.head()



def initialize_parameters(layer_dims):
    np.random.seed(3)
    L = len(layer_dims)
    parameters = {}
    for i in range(1, L):
        parameters['W' + str(i)] = np.ones((layer_dims[i - 1], layer_dims[i])) * 0.1
        parameters['b' + str(i)] = np.zeros((layer_dims[i], 1))
    return parameters

# Utitlity Functions
def sigmoid(Z):
    A = 1 / (1 + np.exp(-Z))
    return A

def linear_forward(A_prev, W, b):
    Z = np.dot(W.T, A_prev) + b
    A = sigmoid(Z)
    return A

# L-layer feed forward
def L_layer_forward(X, parameters):
    A = X
    L = len(parameters) // 2
    for i in range(1, L + 1):
        A_prev = A
        W1 = parameters['W' + str(1)]
        b1 = parameters['b' + str(1)]

        print("A" + str(i - 1) + ": ", A_prev)
        print("W" + str(i) + ": ", W1)
        print("b" + str(i) + ": ", b1)
        print("--" * 20)

        A = linear_forward(A_prev, W1, b1)
        print("A" + str(1) + ": ", A)
        print("**" * 20)
    return A, A_prev

def update_parameters(parameters, y, y_hat, A1, X):
    parameters['W2'][0][0] = parameters['W2'][0][0] + (0.0001 * (y - y_hat) * A1[0][0])
    parameters['W2'][1][0] = parameters['W2'][1][0] + (0.0001 * (y - y_hat) * A1[1][0])
    parameters['b2'][0][0] = parameters['W2'][1][0] + (0.0001 * (y - y_hat))
    parameters['W1'][0][0] = parameters['W1'][0][0] + (0.0001 * (y - y_hat) * parameters['W2'][0][0] * A1[0][0] * (1 - A1[0][0]) * X[0][0])
    parameters['W1'][0][1] = parameters['W1'][0][1] + (0.0001 * (y - y_hat) * parameters['W2'][0][0] * A1[0][0] * (1 - A1[0][0]) * X[1][0])
    parameters['b1'][0][0] = parameters['b1'][0][0] + (0.0001 * (y - y_hat) * parameters['W2'][0][0] * A1[0][0] * (1 - A1[0][0]))
    parameters['W1'][1][0] = parameters['W1'][1][0] + (0.0001 * (y - y_hat) * parameters['W2'][1][0] * A1[1][0] * (1 - A1[1][0]) * X[0][0])
    parameters['W1'][1][1] = parameters['W1'][1][1] + (0.0001 * (y - y_hat) * parameters['W2'][1][0] * A1[1][0] * (1 - A1[1][0]) * X[1][0])
    parameters['b1'][1][0] = parameters['b1'][1][0] + (0.0001 * (y - y_hat) * parameters['W2'][1][0] * A1[1][0] * (1 - A1[1][0]))

X = df[['cgpa', 'profile_score']].values[0].reshape(2, 1)  # Shape(no of features, no. of training example)
y = df[['placed']].values[0][0]

# Parameter initialization
parameters = initialize_parameters([2, 2, 1])
y_hat, A1 = L_layer_forward(X, parameters)
y_hat = y_hat[0][0]



update_parameters(parameters,y,y_hat,A1,X)
X = df[['cgpa', 'profile_score']].values[2].reshape(2,1) # Shape(no offeatures, no. of training example)
y = df[['placed']].values[2][0]
y_hat,A1 = L_layer_forward(X,parameters)
y_hat = y_hat[0][0]



update_parameters(parameters,y,y_hat,A1,X)
print('Loss for this student - ',-y*np.log(y_hat) - (1-y)*np.log(1-y_hat))



X = df[['cgpa', 'profile_score']].values[3].reshape(2,1) # Shape(no of features, no. of training example)
y = df[['placed']].values[3][0]
y_hat,A1 = L_layer_forward(X,parameters)
y_hat = y_hat[0][0]
update_parameters(parameters,y,y_hat,A1,X)



print('Loss for this student - ',-y*np.log(y_hat) - (1-y)*np.log(1-y_hat))




parameters = initialize_parameters([2, 2, 1])
epochs = 50
for i in range(epochs):
    Loss = []
    for j in range(df.shape[0]):
        X = df[['cgpa', 'profile_score']].values[j].reshape(2, 1)  # Shape(no of features, no. of training example)
        y = df[['placed']].values[j][0]
        # Parameter initialization
        y_hat, A1 = L_layer_forward(X, parameters)
        y_hat = y_hat[0][0]
        update_parameters(parameters, y, y_hat, A1, X)
        Loss.append(-y * np.log(y_hat) - (1 - y) * np.log(1 - y_hat))
    print('Epoch - ', i + 1, 'Loss - ', np.array(Loss).mean())